{% assign section_title = block.settings.section_title %}
{% assign show_only_with_bookings = block.settings.show_only_with_bookings %}
{% assign show_date_time = block.settings.show_date_time %}
{% assign show_staff = block.settings.show_staff %}
{% assign show_location = block.settings.show_location %}
{% assign show_notes = block.settings.show_notes %}
{% assign date_format = block.settings.date_format %}
{% assign time_format = block.settings.time_format %}
{% assign no_bookings_message = block.settings.no_bookings_message %}

<!-- Load the Gadget API client library asynchronously -->
<!-- The defer attribute ensures the script loads after HTML parsing but before DOMContentLoaded -->
<script defer src="https://barbershop--development.gadget.app/api/client/web.min.js"></script>

<style>
  /* Hide the main container since we're injecting into existing cart items */
  .booking-cart-details {
    display: none !important;
  }
  
  /* Styles for injected booking details in product column */
  .injected-booking-details {
    margin-top: 0.5rem;
    font-size: 1.1rem;
    color: rgb(var(--color-foreground-75, --color-foreground));
  }
  
  .injected-booking-detail {
    display: block;
    margin-bottom: 0.3rem;
    font-size: 1.1rem;
    line-height: 1.4;
  }
  
  .injected-booking-detail:last-child {
    margin-bottom: 0;
  }
  
  .injected-booking-detail__label {
    font-weight: var(--font-weight-medium, 500);
    color: rgb(var(--color-foreground));
    font-size: 1.1rem;
  }
  
  .injected-booking-detail__value {
    color: rgb(var(--color-foreground-75, --color-foreground));
    font-size: 1.1rem;
  }
  
  @media screen and (max-width: 749px) {
    .injected-booking-details {
      margin-top: 0.4rem;
      font-size: 1rem;
    }
    
    .injected-booking-detail {
      margin-bottom: 0.25rem;
      font-size: 1rem;
    }
    
    .injected-booking-detail__label,
    .injected-booking-detail__value {
      font-size: 1rem;
    }
  }
</style>

<div class="booking-cart-details" id="booking-cart-details" style="display: none;">
  <!-- Hidden container - we inject booking details directly into cart items -->
</div>

<script>
  window.formatBookingDateTime = function(date, time, shopTimezone) {
    try {
      // Parse the date and time
      const bookingDate = new Date(date);
      
      // Format date
      const dateFormatString = "{{ date_format }}";
      let formattedDate = bookingDate.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
      
      // Format time
      let formattedTime = time;
      if (time && time.includes(':')) {
        const [hours, minutes] = time.split(':');
        const timeObj = new Date();
        timeObj.setHours(parseInt(hours), parseInt(minutes));
        
        const timeFormatString = "{{ time_format }}";
        if (timeFormatString.includes('%I')) {
          // 12-hour format
          formattedTime = timeObj.toLocaleTimeString('en-US', {
            hour: 'numeric',
            minute: '2-digit',
            hour12: true
          });
        } else {
          // 24-hour format
          formattedTime = timeObj.toLocaleTimeString('en-US', {
            hour: '2-digit',
            minute: '2-digit',
            hour12: false
          });
        }
      }
      
      return {
        formattedDate,
        formattedTime
      };
    } catch (error) {
      console.error('Error formatting date/time:', error);
      return {
        formattedDate: date,
        formattedTime: time
      };
    }
  };

  // Helper function to find cart line items in the DOM
  function findCartLineItems() {
    // Common Shopify cart line item selectors
    const selectors = [
      '.cart__item',
      '.cart-item', 
      '.line-item',
      '[data-line-item]',
      'tr[data-variant-id]',
      '.cart-item-row',
      '.cart__line',
      '.cart-line-item'
    ];
    
    for (const selector of selectors) {
      const items = document.querySelectorAll(selector);
      if (items.length > 0) {
        return items;
      }
    }
    
    return [];
  }
  
  // Helper function to find the product info container within a line item
  function findProductInfoContainer(lineItem) {
    // Common selectors for product info areas
    const selectors = [
      '.cart-item__details',
      '.cart-item__info',
      '.product-info',
      '.product-details',
      '.cart-item__name',
      '.line-item__name',
      '.item-details',
      '.product-title'
    ];
    
    for (const selector of selectors) {
      const container = lineItem.querySelector(selector);
      if (container) {
        return container;
      }
    }
    
    // If no specific container found, return the line item itself
    return lineItem;
  }
  
  // Helper function to find the best insertion point within product info
  function findInsertionPoint(productInfoContainer) {
    // Look for variant info, price, or other product details to insert after
    const selectors = [
      '.variant-title',
      '.product-variant',
      '.cart-item__variant',
      '.product-price',
      '.cart-item__price',
      '.product-title',
      'h3',
      'h4'
    ];
    
    for (const selector of selectors) {
      const element = productInfoContainer.querySelector(selector);
      if (element) {
        return element;
      }
    }
    
    // If no specific element found, insert at the end of the container
    return productInfoContainer.lastElementChild || productInfoContainer;
  }
  
  // Helper function to match cart line items with booking data
  function matchLineItemWithBooking(lineItem, bookingItem) {
    // Try to match by variant ID
    const variantId = lineItem.getAttribute('data-variant-id') || 
                     lineItem.querySelector('[data-variant-id]')?.getAttribute('data-variant-id');
    
    if (variantId && bookingItem.variant_id.toString() === variantId) {
      return true;
    }
    
    // Try to match by product title
    const productTitle = lineItem.querySelector('.cart-item__name, .line-item__name, .product-title, h3, h4')?.textContent?.trim();
    if (productTitle && productTitle.includes(bookingItem.product_title)) {
      return true;
    }
    
    return false;
  }
  
  // Wait for the HTML document to be fully loaded and parsed
  document.addEventListener('DOMContentLoaded', async () => {
    // Initialize the Gadget API client
    window.api = new BarbershopClient();
    
    const showDateTime = {{ show_date_time | json }};
    const showStaff = {{ show_staff | json }};
    const showLocation = {{ show_location | json }};
    const showNotes = {{ show_notes | json }};
    
    try {
      // Get cart data from Shopify
      const response = await fetch('/cart.js');
      const cart = await response.json();
      
      const bookingItems = [];
      
      // Check each cart item for booking properties
      for (const item of cart.items) {
        const bookingData = {};
        let hasBookingData = false;
        
        // Look for booking properties in line item properties
        if (item.properties) {
          for (const [key, value] of Object.entries(item.properties)) {
            if (key.toLowerCase().includes('booking')) {
              hasBookingData = true;
              bookingData[key] = value;
            }
            // Common booking property names (including underscore-prefixed versions)
            if (['staff_id', 'staffId', '_staff_id', 'location_id', 'locationId', '_location_id', 'booking_date', '_booking_date', 'booking_time', '_booking_time', 'booking_notes', '_booking_notes'].includes(key)) {
              hasBookingData = true;
              bookingData[key] = value;
            }
          }
        }
        
        if (hasBookingData) {
          bookingItems.push({
            ...item,
            bookingData
          });
        }
      }
      
      if (bookingItems.length === 0) {
        return; // No bookings to inject
      }
      
      // Find cart line items in the DOM
      const cartLineItems = findCartLineItems();
      
      if (cartLineItems.length === 0) {
        console.warn('No cart line items found in DOM');
        return;
      }
      
      // Inject booking details into matching line items
      for (const bookingItem of bookingItems) {
        for (const lineItem of cartLineItems) {
          if (matchLineItemWithBooking(lineItem, bookingItem)) {
            // Check if we already injected booking details
            if (lineItem.querySelector('.injected-booking-details')) {
              continue;
            }
            
            // Find the product info container and insertion point
            const productInfoContainer = findProductInfoContainer(lineItem);
            const insertionPoint = findInsertionPoint(productInfoContainer);
            
            // Build booking details HTML with compact inline styling
            let bookingDetailsHtml = '<div class="injected-booking-details">';
            
            // Show date and time
            if (showDateTime && (bookingItem.bookingData.booking_date || bookingItem.bookingData._booking_date || bookingItem.bookingData.booking_time || bookingItem.bookingData._booking_time)) {
              const date = bookingItem.bookingData.booking_date || bookingItem.bookingData._booking_date || bookingItem.bookingData.date;
              const time = bookingItem.bookingData.booking_time || bookingItem.bookingData._booking_time || bookingItem.bookingData.time;
              
              if (date || time) {
                const formatted = window.formatBookingDateTime(date, time);
                bookingDetailsHtml += `<div class="injected-booking-detail">`;
                bookingDetailsHtml += `<span class="injected-booking-detail__label">Date & Time: </span>`;
                bookingDetailsHtml += `<span class="injected-booking-detail__value">${formatted.formattedDate} at ${formatted.formattedTime}</span>`;
                bookingDetailsHtml += `</div>`;
              }
            }
            
            // Show staff
            if (showStaff && (bookingItem.bookingData.staff_id || bookingItem.bookingData._staff_id || bookingItem.bookingData.staffId)) {
              bookingDetailsHtml += `<div class="injected-booking-detail">`;
              bookingDetailsHtml += `<span class="injected-booking-detail__label">Staff: </span>`;
              bookingDetailsHtml += `<span class="injected-booking-detail__value">Staff Member</span>`;
              bookingDetailsHtml += `</div>`;
            }
            
            // Show location
            if (showLocation && (bookingItem.bookingData.location_id || bookingItem.bookingData._location_id || bookingItem.bookingData.locationId)) {
              bookingDetailsHtml += `<div class="injected-booking-detail">`;
              bookingDetailsHtml += `<span class="injected-booking-detail__label">Location: </span>`;
              bookingDetailsHtml += `<span class="injected-booking-detail__value">Location</span>`;
              bookingDetailsHtml += `</div>`;
            }
            
            // Show notes
            if (showNotes && (bookingItem.bookingData.booking_notes || bookingItem.bookingData._booking_notes || bookingItem.bookingData.notes)) {
              const notes = bookingItem.bookingData.booking_notes || bookingItem.bookingData._booking_notes || bookingItem.bookingData.notes;
              if (notes && notes.trim()) {
                bookingDetailsHtml += `<div class="injected-booking-detail">`;
                bookingDetailsHtml += `<span class="injected-booking-detail__label">Notes: </span>`;
                bookingDetailsHtml += `<span class="injected-booking-detail__value">${notes}</span>`;
                bookingDetailsHtml += `</div>`;
              }
            }
            
            bookingDetailsHtml += '</div>';
            
            // Inject the booking details after the insertion point
            insertionPoint.insertAdjacentHTML('afterend', bookingDetailsHtml);
            break; // Found and injected, move to next booking item
          }
        }
      }
      
    } catch (error) {
      console.error('Error injecting booking details:', error);
    }
  });
</script>

{% schema %}
{
  "name": "Cart Booking Info",
  "target": "section",
  "settings": [
    { "type": "text", "label": "Section Title", "id": "section_title", "default": "Your Booking Details" },
    {
      "type": "checkbox",
      "label": "Show section only when bookings exist",
      "id": "show_only_with_bookings",
      "default": true
    },
    { "type": "checkbox", "label": "Show date and time", "id": "show_date_time", "default": true },
    { "type": "checkbox", "label": "Show staff name", "id": "show_staff", "default": true },
    { "type": "checkbox", "label": "Show location", "id": "show_location", "default": true },
    { "type": "checkbox", "label": "Show booking notes", "id": "show_notes", "default": true },
    { "type": "text", "label": "Date format", "id": "date_format", "default": "%B %d, %Y" },
    { "type": "text", "label": "Time format", "id": "time_format", "default": "%I:%M %p" },
    {
      "type": "textarea",
      "label": "No bookings message",
      "id": "no_bookings_message",
      "default": "No barber service bookings in your cart."
    }
  ]
}
{% endschema %}