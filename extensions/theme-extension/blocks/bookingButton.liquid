{% assign button_text = block.settings.button_text | default: "Book Now" %}
{% assign show_staff_selection = block.settings.show_staff_selection | default: true %}
{% assign button_color = block.settings.button_color | default: "#000000" %}
{% assign button_text_color = block.settings.button_text_color | default: "#FFFFFF" %}
{% assign button_padding = block.settings.button_padding | default: 10 %}
{% assign button_radius = block.settings.button_radius | default: 4 %}
{% assign booking_instructions = block.settings.booking_instructions | default: "Select a date, time and barber to book this service." %}

<div class="barbershop-booking-container">
  <!-- Booking Button -->
  <button 
    class="barbershop-booking-btn" 
    id="barbershop-booking-btn"
    style="
      background-color: {{ button_color }};
      color: {{ button_text_color }};
      padding: {{ button_padding }}px {{ button_padding | times: 1.5 }}px;
      border-radius: {{ button_radius }}px;
      border: none;
      cursor: pointer;
      font-size: 16px;
      font-weight: 600;
      width: 100%;
      max-width: 300px;
      transition: opacity 0.2s ease, transform 0.1s ease;
    "
    onclick="openBookingModal()">
    {{ button_text }}
  </button>

  <!-- Booking Modal -->
  <div class="barbershop-modal" id="barbershop-modal" style="
    display: none;
    position: fixed;
    z-index: 9999;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.7);
  ">
    <div class="barbershop-modal-content" style="
      background-color: #fefefe;
      margin: 0;
      padding: 30px;
      border: none;
      border-radius: 0;
      width: 100%;
      height: 100%;
      position: relative;
      box-shadow: none;
      overflow-y: auto;
      box-sizing: border-box;
    ">
      <!-- Close Button -->
      <span class="barbershop-close" style="
        color: #666;
        float: right;
        font-size: 32px;
        font-weight: bold;
        cursor: pointer;
        position: absolute;
        right: 25px;
        top: 20px;
        z-index: 10;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        background: #f8f9fa;
        transition: all 0.2s ease;
      " onclick="closeBookingModal()">&times;</span>

      <!-- Modal Content -->
      <div class="barbershop-modal-body">
        <!-- Loading State -->
        <div id="booking-loading" style="display: none; text-align: center; padding: 40px;">
          <p style="font-size: 16px;">Loading booking options...</p>
        </div>

        <!-- Error State -->
        <div id="booking-error" style="display: none; color: #d32f2f; padding: 15px; background: #ffebee; border-radius: 8px; margin-bottom: 20px;">
        </div>

        <!-- Success State -->
        <div id="booking-success" style="display: none; color: #2e7d32; padding: 15px; background: #e8f5e8; border-radius: 8px; margin-bottom: 20px;">
        </div>

        <!-- Selection Screen -->
        <div id="booking-selection" style="display: none;">
          <h2 style="margin-top: 0; margin-bottom: 15px; text-align: center; font-size: 32px; color: #333;">Book Your Appointment</h2>
          <p style="color: #666; margin-bottom: 40px; text-align: center; font-size: 18px;">Choose how you'd like to book your appointment</p>

          <!-- Book by Service Section -->
          <div style="margin-bottom: 50px;">
            <h3 style="margin-bottom: 25px; color: #333; font-size: 24px;">Book by Service</h3>
            <div id="service-selection-buttons" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 20px;">
              <!-- Service buttons will be populated here -->
            </div>
          </div>

          <!-- Book by Barber Section -->
          {% if show_staff_selection %}
          <div>
            <h3 style="margin-bottom: 25px; color: #333; font-size: 24px;">Book by Barber</h3>
            <div id="staff-selection-buttons" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 20px;">
              <!-- Staff buttons will be populated here -->
            </div>
          </div>
          {% endif %}
        </div>

        <!-- Calendar Booking Interface -->
        <div id="booking-form-container" style="display: none;">
          <!-- Back Button -->
          <div style="margin-bottom: 30px;">
            <button type="button" onclick="showSelectionScreen()" style="
              background: none;
              border: 1px solid #ddd;
              padding: 12px 20px;
              border-radius: 8px;
              cursor: pointer;
              font-size: 16px;
              color: #666;
              display: flex;
              align-items: center;
              gap: 8px;
              transition: all 0.2s ease;
            ">
              &#8592; Back to Selection
            </button>
          </div>

          <!-- Calendar Interface -->
          <div class="barbershop-calendar-container">
            <!-- Left Sidebar -->
            <div class="barbershop-calendar-sidebar">
              <!-- Selected Barber Info -->
              <div id="selected-barber-info" class="barbershop-selected-barber">
                <!-- Barber info will be populated here -->
              </div>

              <!-- Service Selection -->
              <div class="barbershop-service-menu">
                <h3 style="margin: 0 0 15px 0; font-size: 18px; color: #333;">Select Service</h3>
                <div id="service-menu-list">
                  <!-- Service options will be populated here -->
                </div>
              </div>

              <!-- Location Selection -->
              <div class="barbershop-location-selection">
                <h3 style="margin: 20px 0 15px 0; font-size: 18px; color: #333;">Location</h3>
                
                <!-- Single location display -->
                <div id="single-location-display" style="display: none;">
                  <div style="
                    padding: 12px;
                    background: #f8f9fa;
                    border: 1px solid #e9ecef;
                    border-radius: 8px;
                    font-size: 14px;
                    color: #333;
                  ">
                    <div id="single-location-name" style="font-weight: 600; margin-bottom: 4px;"></div>
                    <div id="single-location-address" style="color: #666;"></div>
                  </div>
                </div>
                
                <!-- Multiple locations dropdown -->
                <select id="location-select" required style="
                  width: 100%;
                  padding: 10px;
                  border: 1px solid #ddd;
                  border-radius: 8px;
                  font-size: 14px;
                  box-sizing: border-box;
                  background: white;
                  display: none;
                ">
                  <option value="">Select a location</option>
                </select>
              </div>

              <!-- Notes -->
              <div class="barbershop-notes-section">
                <h3 style="margin: 20px 0 15px 0; font-size: 18px; color: #333;">Notes</h3>
                <textarea id="notes" rows="3" placeholder="Any special requests..." style="
                  width: 100%;
                  padding: 10px;
                  border: 1px solid #ddd;
                  border-radius: 8px;
                  font-size: 14px;
                  resize: vertical;
                  box-sizing: border-box;
                  background: white;
                "></textarea>
              </div>
            </div>

            <!-- Calendar Area -->
            <div class="barbershop-calendar-area">
              <!-- Calendar Header -->
              <div class="barbershop-calendar-header">
                <div class="barbershop-calendar-nav">
                  <button type="button" id="prev-week" class="barbershop-nav-btn">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                      <path d="M10 12L6 8L10 4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                  </button>
                  <h3 id="calendar-month-year" style="margin: 0; font-size: 18px; color: #333; flex: 1; text-align: center;">
                    <!-- Month/Year will be populated here -->
                  </h3>
                  <button type="button" id="next-week" class="barbershop-nav-btn">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                      <path d="M6 4L10 8L6 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                  </button>
                </div>
              </div>

              <!-- Calendar Grid -->
              <div class="barbershop-calendar-grid">
                <!-- Day Headers -->
                <div class="barbershop-calendar-days">
                  <div class="barbershop-day-header">Sun</div>
                  <div class="barbershop-day-header">Mon</div>
                  <div class="barbershop-day-header">Tue</div>
                  <div class="barbershop-day-header">Wed</div>
                  <div class="barbershop-day-header">Thu</div>
                  <div class="barbershop-day-header">Fri</div>
                  <div class="barbershop-day-header">Sat</div>
                </div>

                <!-- Calendar Body -->
                <div class="barbershop-calendar-body" id="calendar-body">
                  <!-- Calendar days and time slots will be populated here -->
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Booking Confirmation Modal -->
        <div id="booking-confirmation" style="display: none; margin-top: 30px;">
          <div style="
            background: #f8f9fa;
            border: 2px solid {{ button_color }};
            border-radius: 16px;
            padding: 30px;
            margin-bottom: 20px;
          ">
            <h3 style="margin: 0 0 20px 0; color: #333; font-size: 24px; text-align: center;">
              Confirm Your Booking
            </h3>
            
            <div id="booking-details" style="
              background: white;
              border-radius: 12px;
              padding: 20px;
              margin-bottom: 20px;
              border: 1px solid #e9ecef;
            ">
              <!-- Booking details will be populated here -->
            </div>
            
            <div style="display: flex; gap: 15px; justify-content: center;">
              <button type="button" onclick="cancelBooking()" style="
                background: #f8f9fa;
                color: #666;
                border: 1px solid #ddd;
                padding: 15px 30px;
                border-radius: 8px;
                cursor: pointer;
                font-size: 16px;
                font-weight: 600;
                transition: all 0.2s ease;
                min-width: 140px;
              ">
                Cancel
              </button>
              
              <button type="button" id="confirm-booking-btn" onclick="confirmBooking()" style="
                background: {{ button_color }};
                color: {{ button_text_color }};
                border: none;
                padding: 15px 30px;
                border-radius: 8px;
                cursor: pointer;
                font-size: 16px;
                font-weight: 600;
                transition: all 0.2s ease;
                min-width: 140px;
              ">
                Add to Cart
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
.barbershop-booking-btn:hover {
  opacity: 0.9;
  transform: translateY(-1px);
}

.barbershop-booking-btn:active {
  transform: translateY(0);
}

.barbershop-close:hover {
  color: white;
  background: #333;
}

.barbershop-selection-btn {
  border: 2px solid #e1e5e9;
  border-radius: 16px;
  padding: 30px;
  cursor: pointer;
  transition: all 0.3s ease;
  background: white;
  text-align: left;
  width: 100%;
  position: relative;
  overflow: hidden;
}

.barbershop-selection-btn:hover {
  border-color: {{ button_color }};
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  transform: translateY(-2px);
}

.barbershop-selection-btn:active {
  transform: translateY(0);
}

.barbershop-service-btn {
  display: flex;
  align-items: center;
  gap: 15px;
}

.barbershop-service-image {
  width: 60px;
  height: 60px;
  border-radius: 8px;
  object-fit: cover;
  border: 2px solid #e1e5e9;
  flex-shrink: 0;
}

.barbershop-service-placeholder {
  background: #f0f0f0;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 24px;
  font-weight: bold;
  color: #666;
}

.barbershop-service-info {
  flex: 1;
  text-align: left;
}

.barbershop-staff-btn {
  display: flex;
  align-items: center;
  gap: 15px;
}

.barbershop-staff-avatar {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #e1e5e9;
}

.barbershop-staff-info {
  flex: 1;
}

.barbershop-selection-title {
  font-size: 22px;
  font-weight: 600;
  color: #333;
  margin: 0;
  line-height: 1.2;
}

.barbershop-selection-subtitle {
  font-size: 16px;
  color: #666;
  margin: 8px 0 0 0;
  line-height: 1.3;
}

.barbershop-selection-price {
  font-size: 18px;
  font-weight: 600;
  color: {{ button_color }};
  margin: 8px 0 0 0;
}

  /* Calendar Interface Styles */
  .barbershop-calendar-container {
    display: flex;
    gap: 40px;
    min-height: 70vh;
  }

  .barbershop-calendar-sidebar {
    width: 320px;
    flex-shrink: 0;
    background: #f8f9fa;
    padding: 30px;
    border-radius: 16px;
    border: 1px solid #e9ecef;
  }

  .barbershop-selected-barber {
    background: white;
    padding: 20px;
    border-radius: 12px;
    margin-bottom: 30px;
    border: 1px solid #e9ecef;
  }

  .barbershop-selected-barber-info {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .barbershop-selected-barber-avatar {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid #e1e5e9;
  }

  .barbershop-selected-barber-details h4 {
    margin: 0 0 5px 0;
    color: #333;
    font-size: 18px;
  }

  .barbershop-selected-barber-details p {
    margin: 0;
    color: #666;
    font-size: 16px;
  }

  .barbershop-service-menu-item {
    background: white;
    border: 1px solid #e9ecef;
    border-radius: 12px;
    padding: 20px;
    margin-bottom: 15px;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .barbershop-service-menu-item:hover {
    border-color: {{ button_color }};
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }

  .barbershop-service-menu-item.selected {
    border-color: {{ button_color }};
    background: rgba(0,0,0,0.02);
  }

  .barbershop-service-menu-item h4 {
    margin: 0 0 8px 0;
    color: #333;
    font-size: 16px;
    font-weight: 600;
  }

  .barbershop-service-menu-item p {
    margin: 0;
    color: #666;
    font-size: 14px;
  }

  .barbershop-service-menu-item .price {
    color: {{ button_color }};
    font-weight: 600;
    font-size: 16px;
    margin-top: 5px;
  }

  .barbershop-calendar-area {
    flex: 1;
    background: white;
    border: 1px solid #e9ecef;
    border-radius: 16px;
    overflow: hidden;
  }

  .barbershop-calendar-header {
    padding: 30px;
    border-bottom: 1px solid #e9ecef;
    background: #f8f9fa;
  }

  .barbershop-calendar-nav {
    display: flex;
    align-items: center;
    gap: 20px;
  }

  .barbershop-nav-btn {
    background: white;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 12px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
  }

  .barbershop-nav-btn:hover {
    background: #f8f9fa;
    border-color: {{ button_color }};
  }

  .barbershop-calendar-grid {
    padding: 30px;
  }

  .barbershop-calendar-days {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 2px;
    margin-bottom: 25px;
  }

  .barbershop-day-header {
    text-align: center;
    padding: 15px;
    font-weight: 600;
    color: #666;
    font-size: 16px;
  }

  .barbershop-calendar-body {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 20px;
  }

  .barbershop-calendar-day {
    min-height: 350px;
    border: 1px solid #e9ecef;
    border-radius: 12px;
    padding: 15px;
    background: white;
  }

  .barbershop-calendar-day.disabled {
    background: #f8f9fa;
    opacity: 0.5;
  }

  .barbershop-day-number {
    font-weight: 600;
    color: #333;
    margin-bottom: 15px;
    font-size: 16px;
  }

  .barbershop-time-slot {
    display: block;
    width: 100%;
    padding: 8px 10px;
    margin-bottom: 6px;
    border: 1px solid #e9ecef;
    border-radius: 6px;
    background: white;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.2s ease;
    text-align: center;
  }

  .barbershop-time-slot:hover {
    background: rgba(0,0,0,0.05);
    border-color: {{ button_color }};
  }

  .barbershop-time-slot.selected {
    background: {{ button_color }};
    color: {{ button_text_color }};
    border-color: {{ button_color }};
  }

  .barbershop-time-slot.unavailable {
    background: #f8f9fa;
    color: #ccc;
    cursor: not-allowed;
    border-color: #f0f0f0;
  }

  .barbershop-time-slot.unavailable:hover {
    background: #f8f9fa;
    border-color: #f0f0f0;
  }

  @media (max-width: 1200px) {
    .barbershop-calendar-container {
      flex-direction: column;
    }
    
    .barbershop-calendar-sidebar {
      width: 100%;
    }
    
    .barbershop-calendar-body {
      grid-template-columns: repeat(4, 1fr);
    }
  }

  @media (max-width: 992px) {
    .barbershop-calendar-body {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  /* Booking Confirmation Styles */
  #booking-confirmation button:hover {
    opacity: 0.9;
    transform: translateY(-1px);
  }
  
  #booking-confirmation button:active {
    transform: translateY(0);
  }
  
  .barbershop-booking-detail-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 0;
    border-bottom: 1px solid #f0f0f0;
  }
  
  .barbershop-booking-detail-row:last-child {
    border-bottom: none;
    font-weight: 600;
    font-size: 18px;
    color: #333;
    margin-top: 10px;
    padding-top: 20px;
    border-top: 2px solid #e9ecef;
  }
  
  .barbershop-booking-detail-label {
    color: #666;
    font-weight: 500;
  }
  
  .barbershop-booking-detail-value {
    color: #333;
    font-weight: 600;
  }

  @media (max-width: 768px) {
    .barbershop-modal-content {
      padding: 20px;
    }
    
    .barbershop-close {
      right: 15px;
      top: 15px;
      font-size: 28px;
      width: 35px;
      height: 35px;
    }
    
    .barbershop-booking-btn {
      font-size: 14px;
    }

    #service-selection-buttons,
    #staff-selection-buttons {
      grid-template-columns: 1fr;
    }
    
    .barbershop-selection-btn {
      padding: 20px;
    }
    
    .barbershop-staff-avatar {
      width: 50px;
      height: 50px;
    }
    
    .barbershop-selection-title {
      font-size: 20px;
    }

    .barbershop-calendar-container {
      gap: 20px;
    }
    
    .barbershop-calendar-sidebar {
      padding: 20px;
    }
    
    .barbershop-calendar-body {
      grid-template-columns: repeat(2, 1fr);
      gap: 15px;
    }
    
    .barbershop-calendar-day {
      min-height: 300px;
      padding: 12px;
    }
    
    #booking-confirmation {
      margin-top: 20px;
    }
    
    #booking-confirmation > div {
      padding: 20px;
    }
    
    #booking-confirmation h3 {
      font-size: 20px;
    }
    
    #booking-confirmation button {
      padding: 12px 20px;
      font-size: 14px;
      min-width: 120px;
    }
  }
</style>

<script>
// Ensure API client is available
if (!window.api && window.BarbershopClient) {
  window.api = new BarbershopClient();
}

// Global variables to store booking data and current selection
let bookingData = null;
let currentSelection = {
  type: null, // 'service' or 'staff'
  serviceId: null,
  staffId: null,
  variantId: null,
  selectedDate: null,
  selectedTime: null,
  locationId: null
};
let currentWeekStart = null;

// Utility functions for UI manipulation
function setLoading(show) {
  const loadingElement = document.getElementById('booking-loading');
  const selectionElement = document.getElementById('booking-selection');
  const formElement = document.getElementById('booking-form-container');
  
  if (loadingElement) {
    loadingElement.style.display = show ? 'block' : 'none';
  }
  if (selectionElement) {
    selectionElement.style.display = show ? 'none' : (formElement && formElement.style.display !== 'none' ? 'none' : 'block');
  }
  if (formElement) {
    formElement.style.display = show ? 'none' : 'none';
  }
}

function hideMessage(type) {
  const messageElement = document.getElementById(`booking-${type}`);
  if (messageElement) {
    messageElement.style.display = 'none';
  }
}

function showMessage(type, message) {
  const messageElement = document.getElementById(`booking-${type}`);
  if (messageElement) {
    messageElement.textContent = message;
    messageElement.style.display = 'block';
  }
}

function closeBookingModal() {
  const modal = document.getElementById('barbershop-modal');
  if (modal) {
    modal.style.display = 'none';
  }
  
  // Reset form
  const form = document.getElementById('booking-form');
  if (form) {
    form.reset();
  }
  
  // Reset selection state
  currentSelection = {
    type: null,
    serviceId: null,
    staffId: null,
    variantId: null,
    selectedDate: null,
    selectedTime: null,
    locationId: null
  };
  
  // Show selection screen and hide form and confirmation
  showSelectionScreen();
  
  // Hide confirmation modal
  const confirmation = document.getElementById('booking-confirmation');
  if (confirmation) {
    confirmation.style.display = 'none';
  }
  
  // Clear selected time slot
  document.querySelectorAll('.barbershop-time-slot.selected').forEach(slot => {
    slot.classList.remove('selected');
  });
  
  // Hide any messages
  hideMessage('error');
  hideMessage('success');
  
  // Reset time select and variant select
  const timeSelect = document.getElementById('time-select');
  if (timeSelect) {
    timeSelect.innerHTML = '<option value="">Select a date first</option>';
  }
  
  const variantSelect = document.getElementById('variant-select');
  if (variantSelect) {
    variantSelect.innerHTML = '<option value="">Select a service first</option>';
  }
}

function showSelectionScreen() {
  const selectionElement = document.getElementById('booking-selection');
  const formElement = document.getElementById('booking-form-container');
  
  if (selectionElement) {
    selectionElement.style.display = 'block';
  }
  if (formElement) {
    formElement.style.display = 'none';
  }
  
  // Hide any messages
  hideMessage('error');
  hideMessage('success');
}

function showBookingForm() {
  const selectionElement = document.getElementById('booking-selection');
  const formElement = document.getElementById('booking-form-container');
  
  if (selectionElement) {
    selectionElement.style.display = 'none';
  }
  if (formElement) {
    formElement.style.display = 'block';
  }
  
  // Hide any messages
  hideMessage('error');
  hideMessage('success');
  
  // Initialize calendar
  initializeCalendar();
  
  // Update selected barber info
  updateSelectedBarberInfo();
  
  // Populate service menu
  populateServiceMenu();
  
  // Check if we should force single location display
  // The backend only returns locations with offersServices=true, so if there's only one, show it as plain text
  const forceMode = (bookingData?.locations?.length === 1) ? 'single' : null;
  
  // Populate locations (this function handles single vs multiple location display)
  populateLocationDropdown(forceMode);
}

function updateSelectedBarberInfo() {
  const container = document.getElementById('selected-barber-info');
  if (!container || !bookingData) return;
  
  if (currentSelection.staffId) {
    const staff = bookingData.staff.find(s => s.id === currentSelection.staffId);
    if (staff) {
      const avatarHtml = staff.avatar?.url 
        ? `<img src="${staff.avatar.url}" alt="${staff.name}" class="barbershop-selected-barber-avatar">` 
        : `<div class="barbershop-selected-barber-avatar" style="background: #f0f0f0; display: flex; align-items: center; justify-content: center; font-size: 18px; font-weight: bold; color: #666;">${staff.name.charAt(0)}</div>`;
      
      container.innerHTML = `
        <div class="barbershop-selected-barber-info">
          ${avatarHtml}
          <div class="barbershop-selected-barber-details">
            <h4>${staff.name}</h4>
            <p>${staff.bio || 'Professional barber'}</p>
          </div>
        </div>
      `;
    }
  } else {
    container.innerHTML = `
      <div style="text-align: center; color: #666; padding: 20px;">
        <p>Select a barber to view their availability</p>
      </div>
    `;
  }
}

function populateServiceMenu() {
  const container = document.getElementById('service-menu-list');
  if (!container || !bookingData) return;
  
  container.innerHTML = '';
  
  let isFirstItem = true;
  
  bookingData.services.forEach(service => {
    if (service.variants && service.variants.length > 0) {
      service.variants.forEach(variant => {
        const serviceItem = document.createElement('div');
        serviceItem.className = 'barbershop-service-menu-item';
        serviceItem.onclick = () => selectServiceFromMenuVariant(service.id, variant.id);
        
        // If this is the first item and we have a pre-selected service/variant that matches, or
        // if this is the first item and we're in staff-first mode with no service selected yet,
        // mark it as selected
        if (isFirstItem && currentSelection.staffId && 
            (currentSelection.serviceId === service.id && currentSelection.variantId === variant.id)) {
          serviceItem.classList.add('selected');
        }
        
        // Format duration for display
        const durationText = variant.duration ? ` • ${variant.duration} minutes` : '';
        const priceHtml = variant.price ? `<div class="price">$${variant.price}</div>` : '';
        
        serviceItem.innerHTML = `
          <h4>${service.title} - ${variant.title}</h4>
          <p>${service.body || 'Professional service'}${durationText}</p>
          ${priceHtml}
        `;
        
        container.appendChild(serviceItem);
        isFirstItem = false;
      });
    }
  });
}

function selectServiceFromMenuVariant(serviceId, variantId) {
  // Remove previous selection
  document.querySelectorAll('.barbershop-service-menu-item').forEach(item => {
    item.classList.remove('selected');
  });
  
  // Add selection to clicked item
  event.target.closest('.barbershop-service-menu-item').classList.add('selected');
  
  // Update selection
  currentSelection.serviceId = serviceId;
  currentSelection.variantId = variantId;
  
  // Update calendar
  updateCalendar();
}



function populateLocationDropdown(forceDisplayMode = null) {
  const locationSelect = document.getElementById('location-select');
  const singleLocationDisplay = document.getElementById('single-location-display');
  const singleLocationName = document.getElementById('single-location-name');
  const singleLocationAddress = document.getElementById('single-location-address');
  
  if (!locationSelect || !bookingData?.locations) {
    return;
  }
  
  // Clear existing options
  locationSelect.innerHTML = '';
  
  // The backend should have already filtered to only service locations, but let's be extra safe
  const serviceLocations = bookingData.locations.filter(location => {
    // More lenient filtering - only exclude if explicitly set to false
    return location.offersServices !== false;
  });
  
  if (serviceLocations.length === 0) {
    locationSelect.innerHTML = '<option value="">No locations available for booking</option>';
    locationSelect.style.display = 'block';
    if (singleLocationDisplay) singleLocationDisplay.style.display = 'none';
    return;
  }
  
  // FORCE single location display if there's only one location, regardless of forceDisplayMode
  const shouldShowAsSingle = serviceLocations.length === 1;
  
  if (shouldShowAsSingle) {
    // Single location - ALWAYS show as plain text
    const location = serviceLocations[0];
    currentSelection.locationId = location.id;
    
    if (singleLocationName) {
      singleLocationName.textContent = location.name;
    }
    if (singleLocationAddress) {
      const addressParts = [];
      if (location.address1) addressParts.push(location.address1);
      if (location.city) addressParts.push(location.city);
      if (location.province) addressParts.push(location.province);
      const fullAddress = addressParts.join(', ');
      singleLocationAddress.textContent = fullAddress;
    }
    
    // FORCE show single location display, hide dropdown
    if (singleLocationDisplay) {
      singleLocationDisplay.style.display = 'block';
    }
    locationSelect.style.display = 'none';
    
    updateCalendar();
  } else {
    // Multiple locations - show dropdown
    locationSelect.innerHTML = '<option value="">Select a location</option>';
    serviceLocations.forEach(location => {
      const option = document.createElement('option');
      option.value = location.id;
      option.textContent = `${location.name} - ${location.address1}, ${location.city}`;
      locationSelect.appendChild(option);
    });
    
    // Show dropdown, hide single location display
    locationSelect.style.display = 'block';
    if (singleLocationDisplay) {
      singleLocationDisplay.style.display = 'none';
    }
    
    // Auto-select the first available location
    const firstLocation = serviceLocations[0];
    locationSelect.value = firstLocation.id;
    currentSelection.locationId = firstLocation.id;
    updateCalendar();
  }
}

// Calendar initialization and navigation
function initializeCalendar() {
  const today = new Date();
  currentWeekStart = getWeekStart(today);
  updateCalendar();
  
  // Set up event listeners for navigation
  document.getElementById('prev-week').addEventListener('click', () => {
    currentWeekStart = new Date(currentWeekStart.getTime() - 7 * 24 * 60 * 60 * 1000);
    updateCalendar();
  });
  
  document.getElementById('next-week').addEventListener('click', () => {
    currentWeekStart = new Date(currentWeekStart.getTime() + 7 * 24 * 60 * 60 * 1000);
    updateCalendar();
  });
  
  // Set up location change listener
  document.getElementById('location-select').addEventListener('change', (e) => {
    currentSelection.locationId = e.target.value;
    updateCalendar();
  });
}

function getWeekStart(date) {
  const d = new Date(date);
  const day = d.getDay();
  const diff = d.getDate() - day;
  return new Date(d.setDate(diff));
}

function updateCalendar() {
  updateCalendarHeader();
  renderCalendarDays();
}

function updateCalendarHeader() {
  const monthYear = document.getElementById('calendar-month-year');
  if (monthYear && currentWeekStart) {
    const options = { month: 'long', year: 'numeric' };
    monthYear.textContent = currentWeekStart.toLocaleDateString('en-US', options);
  }
}

function renderCalendarDays() {
  const calendarBody = document.getElementById('calendar-body');
  if (!calendarBody || !currentWeekStart) return;
  
  calendarBody.innerHTML = '';
  
  for (let i = 0; i < 7; i++) {
    const date = new Date(currentWeekStart.getTime() + i * 24 * 60 * 60 * 1000);
    const dayElement = createCalendarDay(date);
    calendarBody.appendChild(dayElement);
  }
}

function createCalendarDay(date) {
  const dayElement = document.createElement('div');
  dayElement.className = 'barbershop-calendar-day';
  
  const today = new Date();
  const isPast = date < today.setHours(0, 0, 0, 0);
  
  if (isPast) {
    dayElement.classList.add('disabled');
  }
  
  const dayNumber = document.createElement('div');
  dayNumber.className = 'barbershop-day-number';
  dayNumber.textContent = date.getDate();
  dayElement.appendChild(dayNumber);
  
  if (!isPast && currentSelection.serviceId && currentSelection.staffId && currentSelection.locationId) {
    const timeSlots = generateTimeSlots(date);
    timeSlots.forEach(slot => {
      const timeSlotElement = createTimeSlot(slot, date);
      dayElement.appendChild(timeSlotElement);
    });
  }
  
  return dayElement;
}

function generateTimeSlots(date) {
  if (!currentSelection.staffId || !currentSelection.locationId || !bookingData) {
    return [];
  }
  
  // Get day of week for the date
  const dayOfWeek = getDayOfWeek(date);
  
  // Find staff availability for this day and location
  const staffAvailability = bookingData.staffAvailability.find(avail => 
    avail.staffId === currentSelection.staffId &&
    avail.locationId === currentSelection.locationId &&
    avail.dayOfWeek && Array.isArray(avail.dayOfWeek) && avail.dayOfWeek.includes(dayOfWeek) &&
    avail.isAvailable
  );
  
  // Check for date-specific availability overrides
  const dateString = date.toISOString().split('T')[0];
  const dateAvailability = bookingData.staffDateAvailability.find(avail =>
    avail.staffId === currentSelection.staffId &&
    avail.locationId === currentSelection.locationId &&
    avail.date === dateString
  );
  
  // If there's a date override, use that; otherwise use regular availability
  const availability = dateAvailability || staffAvailability;
  
  if (!availability || !availability.isAvailable) {
    return [];
  }
  
  // Generate time slots based on availability
  const slots = [];
  const startTime = parseTime(availability.startTime);
  const endTime = parseTime(availability.endTime);
  
  // Generate 30-minute slots within the available time range
  for (let minutes = startTime; minutes < endTime; minutes += 30) {
    const time = formatTime(minutes);
    slots.push(time);
  }
  
  return slots;
}

function getDayOfWeek(date) {
  const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
  return days[date.getDay()];
}

function parseTime(timeString) {
  if (!timeString) return 0;
  const [hours, minutes] = timeString.split(':').map(Number);
  return hours * 60 + minutes;
}

function formatTime(minutes) {
  const hours = Math.floor(minutes / 60);
  const mins = minutes % 60;
  return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;
}

function createTimeSlot(time, date) {
  const timeSlotElement = document.createElement('button');
  timeSlotElement.className = 'barbershop-time-slot';
  timeSlotElement.textContent = time;
  timeSlotElement.type = 'button';
  
  // Check if this time slot is available based on staff availability
  const isAvailable = isTimeSlotAvailable(time, date);
  
  if (!isAvailable) {
    timeSlotElement.classList.add('unavailable');
    timeSlotElement.disabled = true;
  } else {
    timeSlotElement.addEventListener('click', () => {
      selectTimeSlot(time, date, timeSlotElement);
    });
  }
  
  return timeSlotElement;
}

function isTimeSlotAvailable(time, date) {
  if (!currentSelection.staffId || !currentSelection.locationId || !bookingData) {
    return false;
  }
  
  // Check if the time slot is in the past (for today only)
  const now = new Date();
  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  const appointmentDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());
  
  // If the appointment is today, check if the time slot has already passed with 15-minute grace period
  if (appointmentDate.getTime() === today.getTime()) {
    const currentTime = now.getHours() * 60 + now.getMinutes();
    const slotTime = parseTime(time);
    const gracePeriod = 15; // 15-minute grace period
    
    // Only mark as unavailable if more than 15 minutes have passed since the slot start time
    if (currentTime > slotTime + gracePeriod) {
      return false;
    }
  }
  
  // Get day of week for the date
  const dayOfWeek = getDayOfWeek(date);
  
  // Find staff availability for this day and location
  const staffAvailability = bookingData.staffAvailability.find(avail => 
    avail.staffId === currentSelection.staffId &&
    avail.locationId === currentSelection.locationId &&
    avail.dayOfWeek && avail.dayOfWeek.includes(dayOfWeek) &&
    avail.isAvailable
  );
  
  // Check for date-specific availability overrides
  const dateString = date.toISOString().split('T')[0];
  const dateAvailability = bookingData.staffDateAvailability.find(avail =>
    avail.staffId === currentSelection.staffId &&
    avail.locationId === currentSelection.locationId &&
    avail.date === dateString
  );
  
  // If there's a date override, use that; otherwise use regular availability
  const availability = dateAvailability || staffAvailability;
  
  if (!availability || !availability.isAvailable) {
    return false;
  }
  
  // Check if the time slot falls within the available hours
  const slotTime = parseTime(time);
  const startTime = parseTime(availability.startTime);
  const endTime = parseTime(availability.endTime);
  
  // Make sure the time slot is within the available window
  // and that there's enough time for the service duration
  const serviceDuration = getServiceDuration();
  const slotEndTime = slotTime + serviceDuration;
  
  if (!(slotTime >= startTime && slotEndTime <= endTime)) {
    return false;
  }
  
  // Check for booking conflicts with existing appointments
  const hasConflict = checkBookingConflicts(date, time, serviceDuration);
  if (hasConflict) {
    return false;
  }
  
  return true;
}

function getServiceDuration() {
  if (!currentSelection.serviceId || !bookingData) return 60;
  
  const service = bookingData.services.find(s => s.id === currentSelection.serviceId);
  if (!service || !service.variants || service.variants.length === 0) return 60;
  
  const variant = currentSelection.variantId 
    ? service.variants.find(v => v.id === currentSelection.variantId)
    : service.variants[0];
  
  return variant?.duration || 60;
}

function checkBookingConflicts(date, time, serviceDuration) {
  if (!bookingData.existingBookings || !Array.isArray(bookingData.existingBookings)) {
    return false; // No conflicts if no booking data
  }
  
  // Convert the proposed booking time to a comparable format
  const proposedDate = new Date(date);
  const [hours, minutes] = time.split(':').map(Number);
  const proposedStart = new Date(
    proposedDate.getFullYear(),
    proposedDate.getMonth(), 
    proposedDate.getDate(),
    hours,
    minutes,
    0
  );
  const proposedEnd = new Date(proposedStart.getTime() + (serviceDuration * 60 * 1000));
  
  // Check each existing booking for conflicts
  for (let i = 0; i < bookingData.existingBookings.length; i++) {
    const existingBooking = bookingData.existingBookings[i];
    
    // Skip if different staff or location
    if (existingBooking.staffId !== currentSelection.staffId || 
        existingBooking.locationId !== currentSelection.locationId) {
      continue;
    }
    
    // Parse the existing booking time
    const existingStart = new Date(existingBooking.scheduledAt);
    const existingEnd = new Date(existingStart.getTime() + (existingBooking.duration * 60 * 1000));
    
    // Check for time overlap
    const hasOverlap = (
      (proposedStart >= existingStart && proposedStart < existingEnd) || // Proposed starts during existing
      (proposedEnd > existingStart && proposedEnd <= existingEnd) || // Proposed ends during existing
      (proposedStart <= existingStart && proposedEnd >= existingEnd) // Proposed completely contains existing
    );
    
    if (hasOverlap) {
      return true; // Conflict found
    }
  }
  
  return false; // No conflicts
}

function selectTimeSlot(time, date, element) {
  // Remove previous selection
  document.querySelectorAll('.barbershop-time-slot.selected').forEach(slot => {
    slot.classList.remove('selected');
  });
  
  // Add selection to clicked slot
  element.classList.add('selected');
  
  // Update selection
  currentSelection.selectedTime = time;
  currentSelection.selectedDate = date;
  
  // Show booking confirmation
  showBookingConfirmation();
}

function showBookingConfirmation() {
  const confirmation = document.getElementById('booking-confirmation');
  const formContainer = document.getElementById('booking-form-container');
  if (!confirmation || !formContainer) return;
  
  const service = bookingData.services.find(s => s.id === currentSelection.serviceId);
  const staff = bookingData.staff.find(s => s.id === currentSelection.staffId);
  const location = bookingData.locations.find(l => l.id === currentSelection.locationId);
  const variant = service?.variants.find(v => v.id === currentSelection.variantId);
  
  if (!service || !staff || !location || !variant) return;
  
  const details = document.getElementById('booking-details');
  const notes = document.getElementById('notes').value;
  
  details.innerHTML = `
    <div class="barbershop-booking-detail-row">
      <span class="barbershop-booking-detail-label">Service:</span>
      <span class="barbershop-booking-detail-value">${service.title} - ${variant.title}</span>
    </div>
    <div class="barbershop-booking-detail-row">
      <span class="barbershop-booking-detail-label">Barber:</span>
      <span class="barbershop-booking-detail-value">${staff.name}</span>
    </div>
    <div class="barbershop-booking-detail-row">
      <span class="barbershop-booking-detail-label">Date & Time:</span>
      <span class="barbershop-booking-detail-value">${currentSelection.selectedDate.toLocaleDateString()} at ${currentSelection.selectedTime}</span>
    </div>
    <div class="barbershop-booking-detail-row">
      <span class="barbershop-booking-detail-label">Location:</span>
      <span class="barbershop-booking-detail-value">${location.name}</span>
    </div>
    <div class="barbershop-booking-detail-row">
      <span class="barbershop-booking-detail-label">Duration:</span>
      <span class="barbershop-booking-detail-value">${variant.duration || 60} minutes</span>
    </div>
    ${notes ? `<div class="barbershop-booking-detail-row">
      <span class="barbershop-booking-detail-label">Notes:</span>
      <span class="barbershop-booking-detail-value">${notes}</span>
    </div>` : ''}
    <div class="barbershop-booking-detail-row">
      <span class="barbershop-booking-detail-label">Total:</span>
      <span class="barbershop-booking-detail-value">$${variant.price || 'N/A'}</span>
    </div>
  `;
  
  // Hide the booking form and show the confirmation
  formContainer.style.display = 'none';
  confirmation.style.display = 'block';
}

function cancelBooking() {
  const confirmation = document.getElementById('booking-confirmation');
  const formContainer = document.getElementById('booking-form-container');
  
  if (confirmation) {
    confirmation.style.display = 'none';
  }
  
  if (formContainer) {
    formContainer.style.display = 'block';
  }
  
  // Clear selected time slot
  document.querySelectorAll('.barbershop-time-slot.selected').forEach(slot => {
    slot.classList.remove('selected');
  });
  
  currentSelection.selectedTime = null;
  currentSelection.selectedDate = null;
  
  // Hide any messages
  hideMessage('error');
  hideMessage('success');
}

async function confirmBooking() {
  const confirmBtn = document.getElementById('confirm-booking-btn');
  const originalText = confirmBtn.textContent;
  
  try {
    confirmBtn.textContent = 'Adding...';
    confirmBtn.disabled = true;
    
    const service = bookingData.services.find(s => s.id === currentSelection.serviceId);
    const staff = bookingData.staff.find(s => s.id === currentSelection.staffId);
    const location = bookingData.locations.find(l => l.id === currentSelection.locationId);
    const variant = service?.variants.find(v => v.id === currentSelection.variantId);
    const notes = document.getElementById('notes').value;
    
    // Construct the scheduled datetime with proper timezone handling
    const selectedDate = new Date(currentSelection.selectedDate);
    const [timeHours, timeMinutes] = currentSelection.selectedTime.split(':').map(Number);
    
    // Create a new date object with the selected date and time in local timezone
    const scheduledAt = new Date(
      selectedDate.getFullYear(),
      selectedDate.getMonth(),
      selectedDate.getDate(),
      timeHours,
      timeMinutes,
      0,
      0
    );
    
    // Check if variant has a Shopify variant ID
    const shopifyVariantId = variant.shopifyVariantId || variant.variantId;
    
    if (shopifyVariantId) {
      const cartItemData = {
        id: shopifyVariantId,
        quantity: 1,
        properties: {
          'Booking Date': currentSelection.selectedDate.toLocaleDateString(),
          'Booking Time': currentSelection.selectedTime,
          'Barber': staff.name,
          'Location': location.name,
          'Duration': `${variant.duration || 60} minutes`,
          'Notes': notes || '',
          'Service ID': currentSelection.serviceId,
          'Variant ID': currentSelection.variantId,
          'Staff ID': currentSelection.staffId,
          'Location ID': currentSelection.locationId,
          'Scheduled At': scheduledAt.toISOString()
        }
      };
      
      // Use Shopify's cart API
      const cartResponse = await fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(cartItemData)
      });
      
      if (cartResponse.ok) {
        const cartResult = await cartResponse.json();
        
        showMessage('success', 'Booking added to cart successfully! Complete your purchase to confirm your appointment.');
        
        // Optionally redirect to cart
        setTimeout(() => {
          window.location.href = '/cart';
        }, 1500);
        
      } else {
        const cartError = await cartResponse.text();
        showMessage('error', 'Failed to add booking to cart. Please try again.');
      }
      
    } else {
      showMessage('error', 'This service cannot be booked online. Please contact us directly.');
    }
    
  } catch (error) {
    showMessage('error', error.message || 'Failed to add booking to cart. Please try again.');
  } finally {
    confirmBtn.textContent = originalText;
    confirmBtn.disabled = false;
  }
}

function parseTimeToMinutes(timeStr) {
  const [hours, minutes] = timeStr.split(':').map(Number);
  return hours * 60 + minutes;
}

function hasStaffAvailabilityInNext3Months(staffId) {
  if (!bookingData || !bookingData.staffAvailability || !bookingData.locations) {
    return false;
  }
  
  const today = new Date();
  const threeMonthsFromNow = new Date(today.getTime() + (90 * 24 * 60 * 60 * 1000));
  
  // Check if staff has any regular availability
  const hasRegularAvailability = bookingData.staffAvailability.some(avail => 
    avail.staffId === staffId && 
    avail.isAvailable &&
    avail.dayOfWeek && 
    Array.isArray(avail.dayOfWeek) && 
    avail.dayOfWeek.length > 0
  );
  
  if (!hasRegularAvailability) {
    // If no regular availability, check date-specific availability in the next 3 months
    if (bookingData.staffDateAvailability) {
      return bookingData.staffDateAvailability.some(dateAvail => {
        if (dateAvail.staffId !== staffId || !dateAvail.isAvailable) {
          return false;
        }
        
        const availDate = new Date(dateAvail.date);
        return availDate >= today && availDate <= threeMonthsFromNow;
      });
    }
    return false;
  }
  
  // If staff has regular availability, check if they're blocked for the entire next 3 months
  // by date-specific unavailability
  if (bookingData.staffDateAvailability) {
    // Count how many days in next 3 months they're specifically marked unavailable
    const unavailableDays = bookingData.staffDateAvailability.filter(dateAvail => 
      dateAvail.staffId === staffId && 
      !dateAvail.isAvailable &&
      new Date(dateAvail.date) >= today && 
      new Date(dateAvail.date) <= threeMonthsFromNow
    ).length;
    
    // If they're unavailable for more than 80 days out of 90, consider them unavailable
    if (unavailableDays > 80) {
      return false;
    }
  }
  
  return true;
}

// Service and staff selection functions
function selectService(serviceId, variantId) {
  currentSelection.type = 'service';
  currentSelection.serviceId = serviceId;
  currentSelection.variantId = variantId;
  currentSelection.staffId = null;
  showBookingForm();
}

function selectStaff(staffId) {
  currentSelection.type = 'staff';
  currentSelection.staffId = staffId;
  
  // Automatically select the first available service and variant
  if (bookingData && bookingData.services && bookingData.services.length > 0) {
    const firstService = bookingData.services[0];
    if (firstService.variants && firstService.variants.length > 0) {
      const firstVariant = firstService.variants[0];
      currentSelection.serviceId = firstService.id;
      currentSelection.variantId = firstVariant.id;
    }
  }
  
  showBookingForm();
}

// Main modal opening function
async function openBookingModal() {
  const modal = document.getElementById('barbershop-modal');
  if (!modal) {
    return;
  }
  
  modal.style.display = 'block';
  
  // Reset any previous state
  currentSelection = {
    type: null,
    serviceId: null,
    staffId: null,
    variantId: null,
    selectedDate: null,
    selectedTime: null,
    locationId: null
  };
  
  // Show loading state
  setLoading(true);
  
  try {
    // Load booking data
    await loadBookingData();
    
    // Populate initial selection screen
    populateServiceButtons();
    populateStaffButtons();
    
    // Show selection screen
    setLoading(false);
    showSelectionScreen();
    
  } catch (error) {
    showMessage('error', `Failed to load booking options: ${error.message}`);
    setLoading(false);
  }
}

async function loadBookingData() {
  try {
    // Get shop domain for API call
    const shopDomain = window.Shopify?.shop?.myshopifyDomain || window.location.hostname;
    
    const apiUrl = `https://barbershop--development.gadget.app/api/booking-data?shop=${encodeURIComponent(shopDomain)}`;
    
    // Load booking data from REST API
    const response = await fetch(apiUrl, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
      mode: 'cors'
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
    }
    
    const data = await response.json();
    
    // Handle different response formats
    let processedData;
    if (data.success && data.data) {
      // Response has success/data wrapper
      processedData = data.data;
    } else if (data.services && data.staff && data.locations) {
      // Response is direct data
      processedData = data;
    } else if (data.success === false) {
      // Explicit failure
      throw new Error(data.error || 'Failed to load booking data');
    } else {
      // Unknown format
      throw new Error('Invalid response format from booking API');
    }
    
    // Validate that we have the required data
    if (!processedData.services || !processedData.staff || !processedData.locations) {
      throw new Error('Invalid booking data: missing required fields');
    }
    
    // The backend should have already filtered locations to only include those with offersServices=true
    // But let's add a safety check
    if (processedData.locations && Array.isArray(processedData.locations)) {
      processedData.locations = processedData.locations.filter(location => location.offersServices !== false);
    }
    
    // Set the booking data
    bookingData = processedData;
    
  } catch (error) {
    console.error('Error in loadBookingData:', error);
    throw error;
  }
}


function populateServiceButtons() {
  const container = document.getElementById('service-selection-buttons');
  if (!container || !bookingData || !bookingData.services || !Array.isArray(bookingData.services)) {
    return;
  }
  
  container.innerHTML = '';
  
  bookingData.services.forEach((service) => {
    if (service.variants && service.variants.length > 0) {
      service.variants.forEach((variant) => {
        const button = document.createElement('button');
        button.className = 'barbershop-selection-btn barbershop-service-btn';
        button.onclick = () => selectService(service.id, variant.id);
        
        // Use variant image if available, otherwise fallback to placeholder
        console.log(`Processing variant: ${variant.id} (${variant.title})`);
        
        let imageHtml;
        if (variant.image && variant.image.url && variant.image.url !== 'null') {
          console.log(`Using image for variant ${variant.id}: ${variant.image.url}`);
          imageHtml = `<img src="${variant.image.url}" alt="${service.title} - ${variant.title}" class="barbershop-service-image" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"><div class="barbershop-service-image barbershop-service-placeholder" style="display: none;">${service.title.charAt(0)}</div>`;
        } else {
          console.log(`No image for variant ${variant.id}, using placeholder`);
          imageHtml = `<div class="barbershop-service-image barbershop-service-placeholder">${service.title.charAt(0)}</div>`;
        }
        
        // Format duration for display
        const durationText = variant.duration ? `${variant.duration} minutes` : '';
        const subtitleText = durationText ? `${durationText}` : '';
        
        const priceHtml = variant.price ? `<div class="barbershop-selection-price">$${variant.price}</div>` : '';
        
        button.innerHTML = `
          ${imageHtml}
          <div class="barbershop-service-info">
            <div class="barbershop-selection-title">${service.title} - ${variant.title}</div>
            ${subtitleText ? `<div class="barbershop-selection-subtitle">${subtitleText}</div>` : ''}
            ${priceHtml}
          </div>
        `;
        
        container.appendChild(button);
      });
    }
  });
}

function populateStaffButtons() {
  const container = document.getElementById('staff-selection-buttons');
  if (!container) {
    console.error('Staff selection buttons container not found');
    return;
  }
  
  if (!bookingData) {
    console.error('No booking data available');
    return;
  }
  
  if (!bookingData.staff || !Array.isArray(bookingData.staff)) {
    console.error('Invalid staff data:', bookingData.staff);
    return;
  }
  
  // Filter staff to only show those with availability in the next 3 months
  const availableStaff = bookingData.staff.filter(staff => {
    return hasStaffAvailabilityInNext3Months(staff.id);
  });
  
  container.innerHTML = '';
  
  if (availableStaff.length === 0) {
    container.innerHTML = '<div style="text-align: center; color: #666; padding: 40px;"><p>No barbers are currently available for booking in the next 3 months. Please check back later or contact us directly.</p></div>';
    return;
  }
  
  availableStaff.forEach((staff) => {
    const button = document.createElement('button');
    button.className = 'barbershop-selection-btn barbershop-staff-btn';
    button.onclick = () => selectStaff(staff.id);
    
    const avatarHtml = staff.avatar?.url 
      ? `<img src="${staff.avatar.url}" alt="${staff.name}" class="barbershop-staff-avatar">` 
      : `<div class="barbershop-staff-avatar" style="background: #f0f0f0; display: flex; align-items: center; justify-content: center; font-size: 24px; font-weight: bold; color: #666;">${staff.name.charAt(0)}</div>`;
    
    button.innerHTML = `
      ${avatarHtml}
      <div class="barbershop-staff-info">
        <div class="barbershop-selection-title">${staff.name}</div>
        <div class="barbershop-selection-subtitle">${staff.bio || 'Professional barber'}</div>
      </div>
    `;
    
    container.appendChild(button);
  });
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
  // Initialize API client if not already available
  if (!window.api && window.BarbershopClient) {
    window.api = new BarbershopClient();
  }
  
  // Close modal when clicking outside
  window.onclick = function(event) {
    const modal = document.getElementById('barbershop-modal');
    if (event.target === modal) {
      closeBookingModal();
    }
  };
});
</script>

{% schema %}
{
  "name": "Booking Button",
  "target": "section",
  "stylesheet": "bookingButton.css",
  "javascript": "bookingButton.js",
  "settings": [
    {
      "type": "text",
      "id": "button_text",
      "label": "Button Text",
      "default": "Book Now",
      "info": "Text displayed on the booking button"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button Color",
      "default": "#000000",
      "info": "Background color of the booking button"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button Text Color",
      "default": "#FFFFFF",
      "info": "Text color of the booking button"
    },
    {
      "type": "range",
      "id": "button_padding",
      "label": "Button Padding",
      "min": 5,
      "max": 20,
      "step": 1,
      "default": 10,
      "unit": "px",
      "info": "Padding around the button text"
    },
    {
      "type": "range",
      "id": "button_radius",
      "label": "Button Border Radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "default": 4,
      "unit": "px",
      "info": "Rounded corners of the button"
    },
    {
      "type": "checkbox",
      "id": "show_staff_selection",
      "label": "Show Staff Selection",
      "default": true,
      "info": "Allow customers to book by selecting a specific barber"
    },
    {
      "type": "textarea",
      "id": "booking_instructions",
      "label": "Booking Instructions",
      "default": "Select a date, time and barber to book this service.",
      "info": "Instructions shown to customers when booking"
    }
  ]
}
{% endschema %}
