{%- comment -%}
Configurable Cart Properties Display Extension
Allows merchants to control which booking properties are visible in cart
{%- endcomment -%}

<script>
(function() {
  function hideUnwantedMetadata() {
    console.log('🔍 Cart Metadata Extension: Starting metadata hiding...');
    
    // Debug: Log each setting individually to see what Shopify is passing
    console.log('🔍 Raw setting values:');
    console.log('  hide_staff_id:', {{ block.settings.hide_staff_id | json }});
    console.log('  hide_location_id:', {{ block.settings.hide_location_id | json }});
    console.log('  hide_duration:', {{ block.settings.hide_duration | json }});
    console.log('  hide_notes:', {{ block.settings.hide_notes | json }});
    console.log('  hide_booking_date:', {{ block.settings.hide_booking_date | json }});
    console.log('  hide_booking_time:', {{ block.settings.hide_booking_time | json }});
    console.log('  hide_barber:', {{ block.settings.hide_barber | json }});
    console.log('  hide_location:', {{ block.settings.hide_location | json }});
    
    // Get the settings from Liquid - force boolean conversion
    const settings = {
      hideStaffId: {{ block.settings.hide_staff_id | default: true }},
      hideLocationId: {{ block.settings.hide_location_id | default: true }},
      hideDuration: {{ block.settings.hide_duration | default: false }},
      hideNotes: {{ block.settings.hide_notes | default: false }},
      hideBookingDate: {{ block.settings.hide_booking_date | default: false }},
      hideBookingTime: {{ block.settings.hide_booking_time | default: false }},
      hideBarber: {{ block.settings.hide_barber | default: false }},
      hideLocation: {{ block.settings.hide_location | default: false }}
    };
    
    console.log('🔍 Processed settings:', settings);
    
    // Target the working selector for your theme
    const elements = document.querySelectorAll('.product-option');
    console.log(`🔍 Found ${elements.length} .product-option elements`);
    
    let hiddenCount = 0;
    
    elements.forEach(element => {
      const text = element.textContent || '';
      const cleanText = text.replace(/\s+/g, ' ').trim(); // Remove extra whitespace and newlines
      console.log(`🔍 Processing element: "${cleanText}"`);
      
      // Friendly label replacements for customer-facing metadata
      // booking_date -> Booking Date, booking_time -> Booking Time
      if (/^booking_date\s*:/i.test(cleanText)) {
        element.textContent = cleanText.replace(/^booking_date\s*:/i, 'Booking Date:');
      }
      if (/^booking_time\s*:/i.test(cleanText)) {
        element.textContent = cleanText.replace(/^booking_time\s*:/i, 'Booking Time:');
      }
      // barber_name -> Barber
      if (/^barber_name\s*:/i.test(cleanText)) {
        element.textContent = cleanText.replace(/^barber_name\s*:/i, 'Barber:');
      }
      // location_name -> Location
      if (/^location_name\s*:/i.test(cleanText)) {
        element.textContent = cleanText.replace(/^location_name\s*:/i, 'Location:');
      }
      
      // Hide metadata based on settings
      if (settings.hideStaffId && cleanText.includes('Staff ID:')) {
        console.log(`🚫 Hiding Staff ID: "${cleanText}"`);
        element.style.display = 'none';
        hiddenCount++;
      }
      
      if (settings.hideLocationId && cleanText.includes('Location ID:')) {
        console.log(`🚫 Hiding Location ID: "${cleanText}"`);
        element.style.display = 'none';
        hiddenCount++;
      }
      
      if (settings.hideDuration && (cleanText.includes('Duration:') || cleanText.includes('Length:'))) {
        console.log(`🚫 Hiding Duration/Length: "${cleanText}"`);
        element.style.display = 'none';
        hiddenCount++;
      }
      
      // More flexible duration hiding - works with any property name that contains duration values
      if (settings.hideDuration && !cleanText.includes('Duration:') && !cleanText.includes('Length:')) {
        // Check if this looks like a duration property (contains "min", "minutes", "hour", etc.)
        const durationPatterns = ['min', 'minutes', 'hour', 'hours', 'hr', 'hrs'];
        const hasDurationValue = durationPatterns.some(pattern => cleanText.includes(pattern));
        
        if (hasDurationValue && cleanText.includes(':')) {
          console.log(`🚫 Hiding duration property: "${cleanText}"`);
          element.style.display = 'none';
          hiddenCount++;
        }
      }
      
      if (settings.hideNotes && cleanText.includes('Notes:')) {
        console.log(`🚫 Hiding Notes: "${cleanText}"`);
        element.style.display = 'none';
        hiddenCount++;
      }
      
      if (settings.hideBookingDate && cleanText.includes('Booking Date:')) {
        console.log(`🚫 Hiding Booking Date: "${cleanText}"`);
        element.style.display = 'none';
        hiddenCount++;
      }
      
      if (settings.hideBookingTime && cleanText.includes('Booking Time:')) {
        console.log(`🚫 Hiding Booking Time: "${cleanText}"`);
        element.style.display = 'none';
        hiddenCount++;
      }
      
      if (settings.hideBarber && cleanText.includes('Barber:')) {
        console.log(`🚫 Hiding Barber: "${cleanText}"`);
        element.style.display = 'none';
        hiddenCount++;
      }
      
      if (settings.hideLocation && cleanText.includes('Location:')) {
        console.log(`🚫 Hiding Location: "${cleanText}"`);
        element.style.display = 'none';
        hiddenCount++;
      }
    });
    
    console.log(`✅ Cart Metadata Extension: Hidden ${hiddenCount} elements`);
  }
  
  // Run immediately
  hideUnwantedMetadata();
  
  // Run after cart updates
  document.addEventListener('cart:updated', hideUnwantedMetadata);
  document.addEventListener('cart:refresh', hideUnwantedMetadata);
  
  // Run after a delay to catch dynamic content
  setTimeout(hideUnwantedMetadata, 1000);
  
  // Also run when the page loads completely
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', hideUnwantedMetadata);
  } else {
    hideUnwantedMetadata();
  }
})();
</script>

{% schema %}
{
  "name": "Cart Properties Display",
  "target": "section",
  "settings": [
    {
      "type": "header",
      "content": "Customer-Facing Metadata"
    },
    {
      "type": "checkbox",
      "id": "hide_booking_date",
      "label": "Hide Booking Date",
      "default": false,
      "info": "Hide the booking date from cart display"
    },
    {
      "type": "checkbox",
      "id": "hide_booking_time",
      "label": "Hide Booking Time",
      "default": false,
      "info": "Hide the booking time from cart display"
    },
    {
      "type": "checkbox",
      "id": "hide_barber",
      "label": "Hide Barber",
      "default": false,
      "info": "Hide the barber name from cart display"
    },
    {
      "type": "checkbox",
      "id": "hide_location",
      "label": "Hide Location",
      "default": false,
      "info": "Hide the location name from cart display"
    },
    {
      "type": "checkbox",
      "id": "hide_duration",
      "label": "Hide Duration",
      "default": false,
      "info": "Hide the service duration from cart display"
    },
    {
      "type": "checkbox",
      "id": "hide_notes",
      "label": "Hide Notes",
      "default": false,
      "info": "Hide customer notes from cart display"
    },
    {
      "type": "header",
      "content": "Technical Metadata"
    },
    {
      "type": "checkbox",
      "id": "hide_staff_id",
      "label": "Hide Staff ID",
      "default": true,
      "info": "Hide the staff ID from cart display (recommended)"
    },
    {
      "type": "checkbox",
      "id": "hide_location_id",
      "label": "Hide Location ID",
      "default": true,
      "info": "Hide the location ID from cart display (recommended)"
    }
  ]
}
{% endschema %}