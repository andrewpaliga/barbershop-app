#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * Simple TOML parser for extracting proxy configuration
 * This is a minimal implementation focused on parsing the proxy settings we need
 */
function parseTomlProxy(content) {
  const lines = content.split('\n');
  let inProxySection = false;
  const proxy = {};
  
  for (const line of lines) {
    const trimmed = line.trim();
    
    // Check if we're entering the proxy section
    if (trimmed === '[app_proxy]') {
      inProxySection = true;
      continue;
    }
    
    // Check if we're leaving the proxy section (new section starts)
    if (trimmed.startsWith('[') && trimmed !== '[app_proxy]') {
      inProxySection = false;
      continue;
    }
    
    // Parse proxy configuration
    if (inProxySection && trimmed && !trimmed.startsWith('#')) {
      const [key, ...valueParts] = trimmed.split('=');
      if (key && valueParts.length > 0) {
        const value = valueParts.join('=').trim().replace(/^["']|["']$/g, '');
        proxy[key.trim()] = value;
      }
    }
  }
  
  return proxy;
}

/**
 * Parse .env file content
 */
function parseEnvFile(content) {
  const env = {};
  const lines = content.split('\n');
  
  for (const line of lines) {
    const trimmed = line.trim();
    if (trimmed && !trimmed.startsWith('#')) {
      const [key, ...valueParts] = trimmed.split('=');
      if (key && valueParts.length > 0) {
        const value = valueParts.join('=').trim().replace(/^["']|["']$/g, '');
        env[key.trim()] = value;
      }
    }
  }
  
  return env;
}

/**
 * Read and parse TOML configuration file
 */
function readTomlConfig(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    return parseTomlProxy(content);
  } catch (error) {
    console.warn(`Warning: Could not read TOML file ${filePath}:`, error.message);
    return {};
  }
}

/**
 * Read and parse .env file
 */
function readEnvFile(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    return parseEnvFile(content);
  } catch (error) {
    console.warn(`Warning: Could not read .env file ${filePath}:`, error.message);
    return {};
  }
}

/**
 * Generate configuration based on environment
 */
function generateConfig() {
  const environment = process.env.NODE_ENV || 'production';
  const isDevelopment = environment === 'development';
  
  console.log(`Generating configuration for ${environment} environment...`);
  
  // Determine which TOML file to use
  const tomlFile = isDevelopment ? 'shopify.app.development.toml' : 'shopify.app.toml';
  const tomlPath = path.join(process.cwd(), tomlFile);
  
  console.log(`Reading TOML configuration from: ${tomlFile}`);
  const proxyConfig = readTomlConfig(tomlPath);
  
  // Read environment variables from .env files
  const envFiles = ['.env', `.env.${environment}`];
  let envVars = {};
  
  for (const envFile of envFiles) {
    const envPath = path.join(process.cwd(), envFile);
    const fileEnvVars = readEnvFile(envPath);
    envVars = { ...envVars, ...fileEnvVars };
  }
  
  // Build configuration object
  const config = {
    environment,
    isDevelopment,
    proxy: {
      prefix: proxyConfig.prefix || 'apps',
      subpath: proxyConfig.subpath || 'simplybook',
      url: proxyConfig.url || ''
    },
    // Add any relevant environment variables
    apiUrl: envVars.GADGET_PUBLIC_API_URL || '',
    appUrl: envVars.GADGET_PUBLIC_APP_URL || ''
  };
  
  console.log('Generated configuration:', JSON.stringify(config, null, 2));
  
  return config;
}

/**
 * Write configuration file
 */
function writeConfigFile(config) {
  const outputDir = path.join(process.cwd(), 'extensions', 'theme-extension', 'assets');
  const outputFile = path.join(outputDir, 'app-config.js');
  
  // Ensure directory exists
  try {
    fs.mkdirSync(outputDir, { recursive: true });
  } catch (error) {
    console.error('Error creating output directory:', error.message);
    process.exit(1);
  }
  
  // Generate JavaScript content
  const jsContent = `// Auto-generated configuration file
// Do not edit manually - this file is generated by scripts/generate-config.js

window.SimplyBookConfig = ${JSON.stringify(config, null, 2)};

// Export for module systems
if (typeof module !== 'undefined' && module.exports) {
  module.exports = window.SimplyBookConfig;
}
`;
  
  try {
    fs.writeFileSync(outputFile, jsContent, 'utf8');
    console.log(`‚úÖ Configuration file written to: ${outputFile}`);
  } catch (error) {
    console.error('Error writing configuration file:', error.message);
    process.exit(1);
  }
}

/**
 * Main function
 */
function main() {
  try {
    console.log('üîß Generating theme extension configuration...');
    
    const config = generateConfig();
    writeConfigFile(config);
    
    console.log('‚úÖ Configuration generation completed successfully!');
  } catch (error) {
    console.error('‚ùå Error generating configuration:', error.message);
    process.exit(1);
  }
}

// Run the script if called directly
if (require.main === module) {
  main();
}

module.exports = { generateConfig, writeConfigFile, parseTomlProxy, parseEnvFile };